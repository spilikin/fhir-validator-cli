/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package validator;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.context.support.DefaultProfileValidationSupport;
import ca.uhn.fhir.parser.IParser;
import ca.uhn.fhir.validation.FhirValidator;
import ca.uhn.fhir.validation.IValidatorModule;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationResult;
import org.hl7.fhir.common.hapi.validation.support.*;
import org.hl7.fhir.common.hapi.validation.validator.FhirInstanceValidator;
import org.hl7.fhir.instance.model.api.IBaseResource;
import org.hl7.fhir.utilities.npm.NpmPackage;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class App {

    public static List<File> listJsonFiles(File directory) {
        List<File> resultList = new ArrayList<>();

        // Get all files in the directory
        File[] files = directory.listFiles();

        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    // Recursively call the method to get files in subdirectories
                    resultList.addAll(listJsonFiles(file));
                } else {
                    // Check if the file is a JSON file
                    if (file.getName().endsWith(".json")) {
                        resultList.add(file);
                    }
                }
            }
        }

        return resultList;
    }

    public static void main(String[] args) throws Exception {
        FhirContext ctx = FhirContext.forR4();

        // Configure Sushi project validation sopport
        SushiProjectValidationSupport sushiProjectValidationSupport = new SushiProjectValidationSupport(ctx, Paths.get("/Users/serg/Development/gematik/api-vzd/src/fhir"));

        // Create a support chain including the NPM Package Support
        ValidationSupportChain validationSupportChain = new ValidationSupportChain(
                sushiProjectValidationSupport,
                new CommonCodeSystemsTerminologyService(ctx),
                new InMemoryTerminologyServerValidationSupport(ctx),
                new DefaultProfileValidationSupport(ctx),
                new SnapshotGeneratingValidationSupport(ctx)
        );

        // Ask the context for a validator
        FhirValidator validator = ctx.newValidator();

        // Create a validation module and register it
        IValidatorModule module = new FhirInstanceValidator(validationSupportChain);
        validator.registerValidatorModule(module);

        InputStream fis = new FileInputStream("/Users/serg/Development/gematik/api-vzd/src/fhir/fsh-generated/resources/Organization-OrganizationExample.json");
        IParser parser = FhirContext.forR4().newJsonParser();
        IBaseResource resource = parser.parseResource(fis);

        // Pass a resource instance as input to be validated
        ValidationResult result = validator.validateWithResult(resource);

        System.out.println("------------------------------------------------------------------------------");
        // The result object now contains the validation results
        for (SingleValidationMessage message : result.getMessages()) {
            System.out.println(message.getSeverity() + " " + message.getMessageId() + " " + message.getLocationString() + " " + message.getMessage());
        }
    }
}
